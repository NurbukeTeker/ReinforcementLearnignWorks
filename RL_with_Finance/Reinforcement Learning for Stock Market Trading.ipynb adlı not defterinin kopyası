{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Reinforcement Learning for Stock Market Trading.ipynb adlı not defterinin kopyası","provenance":[{"file_id":"https://github.com/sergejhorvat/Tensorflow2.0_Udemy/blob/master/Reinforcement_Learning_for_Stock_Market_Trading.ipynb","timestamp":1628088126548}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"OvngQKLBix6z"},"source":["Guide : https://www.mlq.ai/deep-reinforcement-learning-for-trading-with-tensorflow-2-0/"]},{"cell_type":"markdown","metadata":{"id":"CFYKMfEEEzni"},"source":["## Stage 1: Installing dependencies and environment setup\n"]},{"cell_type":"code","metadata":{"id":"UEPWe6QNErug","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256867762,"user_tz":-180,"elapsed":3698,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"005aa850-8cfd-42a7-a634-eca6c4d800ab"},"source":["!pip install tensorflow-gpu==2.0.0rc0"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: tensorflow-gpu==2.0.0rc0 in /usr/local/lib/python3.7/dist-packages (2.0.0rc0)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (0.2.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.34.1)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.19.5)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.12.1)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (0.12.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.15.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.1.2)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (3.17.3)\n","Requirement already satisfied: tb-nightly<1.15.0a20190807,>=1.15.0a20190806 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.15.0a20190806)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (0.36.2)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (3.3.0)\n","Requirement already satisfied: tf-estimator-nightly<1.14.0.dev2019080602,>=1.14.0.dev2019080601 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.14.0.dev2019080601)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.1.0)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (0.8.1)\n","Requirement already satisfied: keras-applications>=1.0.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.0.0rc0) (1.0.8)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras-applications>=1.0.8->tensorflow-gpu==2.0.0rc0) (3.1.0)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (57.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (3.3.4)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (1.0.1)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (4.6.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras-applications>=1.0.8->tensorflow-gpu==2.0.0rc0) (1.5.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->markdown>=2.6.8->tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (3.5.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->markdown>=2.6.8->tb-nightly<1.15.0a20190807,>=1.15.0a20190806->tensorflow-gpu==2.0.0rc0) (3.7.4.3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rysgKQmAmpao","executionInfo":{"status":"ok","timestamp":1628256870390,"user_tz":-180,"elapsed":2639,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"80ee06f2-b33a-42d6-f281-424300c2923a"},"source":["!pip install yfinance"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: yfinance in /usr/local/lib/python3.7/dist-packages (0.1.63)\n","Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.6.3)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.1.5)\n","Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.9)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.19.5)\n","Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.23.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24->yfinance) (1.15.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (2021.5.30)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (1.24.3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6lafKy3gGRFW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256872858,"user_tz":-180,"elapsed":2477,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"028109ef-97ec-4e67-e75e-8b8ce868aba1"},"source":["!pip install pandas-datareader"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pandas-datareader in /usr/local/lib/python3.7/dist-packages (0.9.0)\n","Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.7/dist-packages (from pandas-datareader) (1.1.5)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.7/dist-packages (from pandas-datareader) (4.6.3)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from pandas-datareader) (2.23.0)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->pandas-datareader) (1.19.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->pandas-datareader) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->pandas-datareader) (2.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.23->pandas-datareader) (1.15.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pandas-datareader) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pandas-datareader) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pandas-datareader) (2021.5.30)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pandas-datareader) (2.10)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"J0BVbvetGrlR"},"source":["## Stage 2: Importing project dependencies"]},{"cell_type":"code","metadata":{"id":"qALiMginGiMW","executionInfo":{"status":"ok","timestamp":1628256878284,"user_tz":-180,"elapsed":5433,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["import math\n","import random\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import pandas_datareader as data_reader\n","\n","from tqdm import tqdm_notebook, tqdm\n","from collections import deque"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"drGd9adHGuje","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1628256878292,"user_tz":-180,"elapsed":36,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"cdc84740-559e-4deb-88ac-f64cebafcebb"},"source":["tf.__version__"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'2.0.0-rc0'"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"__E4SMMaGwqb"},"source":["## Stage 3: Building the AI Trader network"]},{"cell_type":"code","metadata":{"id":"PCggfrCtGyiG","executionInfo":{"status":"ok","timestamp":1628256878293,"user_tz":-180,"elapsed":15,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["class AI_Trader():\n","  \n","  def __init__(self, state_size, action_space=3, model_name=\"AITrader\"): #Stay, Buy, Sell\n","    \n","    self.state_size = state_size\n","    self.action_space = action_space\n","    self.memory = deque(maxlen=2000)\n","    self.inventory = []\n","    self.model_name = model_name\n","    \n","    # Define hyperparamaters\n","    self.gamma = 0.95\n","    self.epsilon = 1.0\n","    self.epsilon_final = 0.01\n","    self.epsilon_decay = 0.995\n","        \n","    # Call a function  to build a model trought this class constructor\n","    # More parameters could be ustilized to programaticaly define network size (layers and neurons)\n","    self.model = self.model_builder()\n","    \n","    \n","  def model_builder(self):\n","    \n","    model = tf.keras.models.Sequential()    \n","    model.add(tf.keras.layers.Dense(units=32, activation='relu', input_dim=self.state_size))    \n","    model.add(tf.keras.layers.Dense(units=64, activation='relu'))    \n","    model.add(tf.keras.layers.Dense(units=128, activation='relu'))    \n","    model.add(tf.keras.layers.Dense(units=self.action_space, activation='linear'))    \n","    model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(lr=0.001))    \n","    return model\n","  \n","  \n","  \n","  \n","  # Trade function that takes state as an input and returns an action \n","  # to perform in perticular state \n","  def trade(self, state):\n","    \n","    # Should we perform a renadom generated action or action defined in model?\n","    \n","    # If value from our random generator is smaller or equal to our epsilon \n","    #     then we will retun a random action from action_space [0-3)\n","    if random.random() <= self.epsilon:\n","      return random.randrange(self.action_space)\n","    \n","    # If our random is greater than epsilon then we will use model to perform action\n","    actions = self.model.predict(state)\n","    # return only a one number defining an action (#Stay - 0 , Buy - 1, Sell - 2) \n","    #    that has maximum probability\n","    return np.argmax(actions[0])\n","  \n","  \n","  \n","  def batch_train(self, batch_size):\n","    \n","    batch = []\n","    \n","    # Iterrate in momory, we do not want to randolmy select data as we are dealing with \n","    #    time constraint data. We will always sample from the end of memory size of bath\n","    for i in range(len(self.memory) - batch_size + 1, len(self.memory)):\n","      # insert data from memory to batch      \n","      batch.append(self.memory[i])\n","    \n","    \n","    # Iterate trought batch of data and train the model for each sample from batch\n","    # Order of variables in for loop is important\n","    for state, action, reward, next_state, done in batch:\n","      # Reward if agent is in terminal state\n","      reward = reward\n","      # Check that agent is not in terminal state\n","      # If not in terminal state calculate reward for actions that could be played\n","      if not done:\n","        # Discounted total reward:\n","        reward = reward + self.gamma * np.amax(self.model.predict(next_state)[0])        \n","      # Target variable that is predicted by the model (action)\n","      target = self.model.predict(state)\n","      target[0][action] = reward\n","      \n","      self.model.fit(state, target, epochs=1, verbose=0)\n","      \n","    # We will decrease epsilon parameter that is 1 as defined in __init__  so\n","    #    so we can stop performing random actions at some point\n","    if self.epsilon > self.epsilon_final:\n","      self.epsilon *= self.epsilon_decay"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7tcUyJMnS479"},"source":["## Stage 4: Dataset preprocessing"]},{"cell_type":"markdown","metadata":{"id":"ya_4XPUMS8Pe"},"source":["### Defining helper functions"]},{"cell_type":"markdown","metadata":{"id":"kK6UDGe0TACz"},"source":["#### Sigmoid"]},{"cell_type":"code","metadata":{"id":"IzXG-49iSZX3","executionInfo":{"status":"ok","timestamp":1628256878294,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["# Usually used at the end of a network for binary classifictation\n","# It changes range of input to scale of [0,1]\n","# So we can normalize input data for comparision day by day if they are on different scale\n","def sigmoid(x):\n","  return 1 / (1 + math.exp(-x))"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0VRbmx_OTDtZ"},"source":["#### Price format function"]},{"cell_type":"code","metadata":{"id":"N8vVBL8YTGaE","executionInfo":{"status":"ok","timestamp":1628256878295,"user_tz":-180,"elapsed":14,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["def stocks_price_format(n):\n","  if n < 0:\n","    return \"- $ {0:2f}\".format(abs(n))\n","  else:\n","    return \"$ {0:2f}\".format(abs(n))"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j8_bXTiFTHnH"},"source":["#### Dataset loader"]},{"cell_type":"code","metadata":{"id":"-pXYjiBwNRsV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256878870,"user_tz":-180,"elapsed":588,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"68953acc-f32f-4755-8d8d-ecfe5e34d918"},"source":["import yfinance as yf\n","import numpy as np\n","\n","def dataset_loader(stock_name):\n","  try:\n","    \n","    date1=\"2020-07-27\"\n","    date2=\"2021-07-28\"\n","    data = yf.download(tickers=stock_name, start=date1, end=date2, interval='1d' )\n","    close = data['Close']\n","    return close\n","  except Exception as e:\n","      print(e)\n","\n","\n","# Check the data gathered with pandas data_reader:\n","stock_name= \"AAPL\"\n","dataset = dataset_loader(stock_name)\n","print(\"Data set top rows:\", \"\\n\" ,dataset.head())\n","\n","print(\"Test some cutting with pandas\")\n","print(\"Start date: \", str(dataset.index[0]).split()[0])\n","print(\"End date: \", str(dataset.index[-1]).split()[0])"],"execution_count":9,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n","Data set top rows: \n"," Date\n","2020-07-27     94.809998\n","2020-07-28     93.252502\n","2020-07-29     95.040001\n","2020-07-30     96.190002\n","2020-07-31    106.260002\n","Name: Close, dtype: float64\n","Test some cutting with pandas\n","Start date:  2020-07-27\n","End date:  2021-07-27\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eG5ueRzH1Kh8"},"source":["### State creator"]},{"cell_type":"code","metadata":{"id":"zwTS0EyZ0O1k","executionInfo":{"status":"ok","timestamp":1628256878871,"user_tz":-180,"elapsed":27,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["# Data -> dataset to predict from, gathered by data:loader()\n","# Timestep -> Day in the dataset that we want to predict for [0:datalength]\n","# window_suze -> how many days in past we want to use to predict current status[1:datalength]\n","#         Try different setup to see what creates best fit\n","def state_creator(data, timestep, window_size):\n","  \n","  # starting day of our state\n","  starting_id = timestep - window_size + 1\n","  \n","  if starting_id >= 0:\n","    windowed_data = data[starting_id:timestep+1]\n","  else:\n","    # Replicate member (data[0]) needed times\n","    windowed_data = - starting_id * [data[0]] + list(data[0:timestep+1])\n","    \n","  state = []\n","  # Iterate trough whole windowed_data minus current state (-1)\n","  for i in range(window_size - 1):\n","    # Normalize the difference from current day and the next day\n","    # Because the prices can be very different and we want them on same scale\n","    state.append(sigmoid(windowed_data[i+1] - windowed_data[i]))\n","    \n","  return np.array([state])"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sV2a68QC34N-"},"source":["### Loading a dataset"]},{"cell_type":"code","metadata":{"id":"acuYlqD83xcX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256878872,"user_tz":-180,"elapsed":25,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"5cf6702d-8328-432f-fdbe-f99a4c596c07"},"source":["# Tage data for Apple\n","stock_name = \"AAPL\"\n","data = dataset_loader(stock_name)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pW8QqUbYiESQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256878873,"user_tz":-180,"elapsed":19,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"b9c3a349-a9e5-4f85-c0cc-0ccbe7633844"},"source":["data"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date\n","2020-07-27     94.809998\n","2020-07-28     93.252502\n","2020-07-29     95.040001\n","2020-07-30     96.190002\n","2020-07-31    106.260002\n","                 ...    \n","2021-07-21    145.399994\n","2021-07-22    146.800003\n","2021-07-23    148.559998\n","2021-07-26    148.990005\n","2021-07-27    146.770004\n","Name: Close, Length: 253, dtype: float64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"k_KUeBY14o8Z"},"source":["## Stage 5: Training the AI Trader"]},{"cell_type":"markdown","metadata":{"id":"hkyW12-L4qo_"},"source":["### Setting hyper parameters"]},{"cell_type":"code","metadata":{"id":"dKfuoXO84c5X","executionInfo":{"status":"ok","timestamp":1628256878874,"user_tz":-180,"elapsed":13,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["window_size = 10\n","episodes = 1000 # same as epoch\n","\n","batch_size = 32\n","data_samples = len(data) - 1 # discard last value, that we will predict on"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h2kvNZx24sJ7"},"source":["### Defining the Trader model"]},{"cell_type":"code","metadata":{"id":"M4LmF2V94trY","executionInfo":{"status":"ok","timestamp":1628256888838,"user_tz":-180,"elapsed":9975,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}}},"source":["trader = AI_Trader(window_size)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"y66jkzwW4wNV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628256888839,"user_tz":-180,"elapsed":24,"user":{"displayName":"Nurbüke Teker","photoUrl":"","userId":"01884499986309133327"}},"outputId":"538fa336-c6f8-4ada-c2af-416eb07ccf82"},"source":["trader.model.summary()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 32)                352       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 64)                2112      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 128)               8320      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 3)                 387       \n","=================================================================\n","Total params: 11,171\n","Trainable params: 11,171\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QRip_rac5zHS"},"source":["### Training loop"]},{"cell_type":"code","metadata":{"id":"b0tytPl-5hdg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"65ed70fb-3b4d-4e70-d589-c2391670621f"},"source":["for episode in range(1, episodes + 1):\n","  \n","  # To keep track of training process\n","  # .format populates {} with variables in .format(x,y)\n","  print(\"Episode: {}/{}\".format(episode, episodes))\n","  \n","  # Create state\n","  # second parameter is timestep = 0\n","  state = state_creator(data, 0, window_size + 1)\n","  \n","  total_profit = 0\n","  # Empty inventory before starting episode\n","  trader.inventory = []\n","  \n","  # One timestep is one day so number of timesteps we have represent data we have\n","  # tqdm is used for visualization\n","  for t in tqdm(range(data_samples)):\n","    \n","    # First we will access action that is going to be taken by model \n","    action = trader.trade(state)\n","    \n","    # Use action to get to next state(t+)\n","    next_state = state_creator(data, t+1, window_size + 1)\n","    # As we did not calculate anything up to this point reward is 0\n","    reward = 0\n","    \n","    if action == 1: #Buying\n","      # Put buyed stock to inventory to trade with\n","      trader.inventory.append(data[t])\n","      print(\"AI Trader bought: \", stocks_price_format(data[t]))\n","      \n","    # To sell we need to have something in inventory  \n","    elif action == 2 and len(trader.inventory) > 0: #Selling\n","      # Check buy price, pop removes first value from list\n","      buy_price = trader.inventory.pop(0)\n","      \n","      # If we gain money (current price - buy price) we have reward \n","      #    if we lost money then reward is 0\n","      reward = max(data[t] - buy_price, 0)\n","      total_profit += data[t] - buy_price\n","      print(\"AI Trader sold: \", stocks_price_format(data[t]), \" Profit: \" + stocks_price_format(data[t] - buy_price) )\n","      \n","    # if t is last sample in our dateset we are done\n","    #     we do not have any steps to perform in current episode\n","    if t == data_samples - 1:\n","      done = True\n","    else:\n","      done = False\n","    \n","    # Append all data to trader-agent memory, experience buffer\n","    trader.memory.append((state, action, reward, next_state, done))\n","    \n","    # change state to next state, so we are done with an episode\n","    state = next_state\n","    \n","    if done:\n","      print(\"########################\")\n","      print(\"TOTAL PROFIT: {}\".format(total_profit))\n","      print(\"########################\")\n","    \n","    # Chekc if we have more information in our memory than batch size\n","    if len(trader.memory) > batch_size:\n","      trader.batch_train(batch_size)\n","  \n","  # Save the model every 10 episodes\n","  # if episode % 10 == 0:\n","  #   print(\"model saving\")\n","  trader.model.save(\"ai_trader_{}.h5\".format(episode))\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/252 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Episode: 1/1000\n","AI Trader bought:  $ 96.190002\n","AI Trader sold:  $ 106.260002  Profit: $ 10.070000\n","AI Trader bought:  $ 109.375000\n","AI Trader bought:  $ 113.010002\n","AI Trader bought:  $ 114.907501\n","AI Trader bought:  $ 114.607498\n","AI Trader bought:  $ 115.562500\n","AI Trader bought:  $ 115.707497\n","AI Trader sold:  $ 124.370003  Profit: $ 14.995003\n","AI Trader bought:  $ 124.824997\n","AI Trader bought:  $ 125.010002\n","AI Trader sold:  $ 124.807503  Profit: $ 11.797501\n","AI Trader bought:  $ 129.039993\n","AI Trader bought:  $ 131.399994\n","AI Trader bought:  $ 120.879997\n","AI Trader bought:  $ 113.489998\n","WARNING:tensorflow:Entity <function Function._initialize_uninitialized_variables.<locals>.initialize_variables at 0x7fe2fafcba70> could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: module 'gast' has no attribute 'Index'\n","WARNING: Entity <function Function._initialize_uninitialized_variables.<locals>.initialize_variables at 0x7fe2fafcba70> could not be transformed and will be executed as-is. Please report this to the AutoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: module 'gast' has no attribute 'Index'\n"],"name":"stdout"},{"output_type":"stream","text":["\r 13%|█▎        | 33/252 [00:04<00:32,  6.75it/s]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 112.000000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 13%|█▎        | 34/252 [00:07<03:21,  1.08it/s]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 115.360001  Profit: $ 0.452499\n"],"name":"stdout"},{"output_type":"stream","text":["\r 14%|█▍        | 35/252 [00:10<05:12,  1.44s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 115.540001  Profit: $ 0.932503\n"],"name":"stdout"},{"output_type":"stream","text":["\r 14%|█▍        | 36/252 [00:13<06:40,  1.85s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 112.129997  Profit: - $ 3.432503\n"],"name":"stdout"},{"output_type":"stream","text":["\r 15%|█▍        | 37/252 [00:16<07:48,  2.18s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 110.339996\n"],"name":"stdout"},{"output_type":"stream","text":["\r 15%|█▌        | 38/252 [00:18<08:12,  2.30s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 106.839996  Profit: - $ 8.867500\n"],"name":"stdout"},{"output_type":"stream","text":["\r 15%|█▌        | 39/252 [00:21<08:51,  2.49s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 110.080002  Profit: - $ 14.744995\n"],"name":"stdout"},{"output_type":"stream","text":["\r 16%|█▌        | 40/252 [00:24<08:55,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 111.809998  Profit: - $ 13.200005\n"],"name":"stdout"},{"output_type":"stream","text":[" 17%|█▋        | 42/252 [00:29<09:19,  2.66s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 108.220001  Profit: - $ 20.819992\n"],"name":"stdout"},{"output_type":"stream","text":["\r 17%|█▋        | 43/252 [00:32<09:45,  2.80s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 112.279999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 17%|█▋        | 44/252 [00:35<09:29,  2.74s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 114.959999  Profit: - $ 16.439995\n"],"name":"stdout"},{"output_type":"stream","text":[" 18%|█▊        | 46/252 [00:41<09:35,  2.80s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 115.809998  Profit: - $ 5.070000\n"],"name":"stdout"},{"output_type":"stream","text":[" 20%|█▉        | 50/252 [00:51<08:58,  2.67s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 113.160004  Profit: - $ 0.329994\n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|██        | 51/252 [00:53<08:41,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 115.080002  Profit: $ 3.080002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 21%|██        | 52/252 [00:56<08:28,  2.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 114.970001  Profit: $ 4.630005\n"],"name":"stdout"},{"output_type":"stream","text":[" 22%|██▏       | 56/252 [01:07<08:17,  2.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 121.190002\n"],"name":"stdout"},{"output_type":"stream","text":[" 23%|██▎       | 58/252 [01:13<09:12,  2.85s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 119.019997  Profit: $ 6.739998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 23%|██▎       | 59/252 [01:15<08:44,  2.72s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 115.980003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 24%|██▍       | 60/252 [01:18<08:32,  2.67s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 117.510002  Profit: - $ 3.680000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 24%|██▍       | 61/252 [01:20<08:26,  2.65s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 116.870003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 25%|██▍       | 62/252 [01:23<08:19,  2.63s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 115.750000  Profit: - $ 0.230003\n"],"name":"stdout"},{"output_type":"stream","text":[" 25%|██▌       | 64/252 [01:28<08:10,  2.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 115.050003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 26%|██▌       | 65/252 [01:32<09:35,  3.08s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 116.599998  Profit: - $ 0.270004\n"],"name":"stdout"},{"output_type":"stream","text":["\r 26%|██▌       | 66/252 [01:35<09:05,  2.93s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 111.199997  Profit: - $ 3.850006\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 67/252 [01:37<08:42,  2.83s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 115.320000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 68/252 [01:40<08:27,  2.76s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 108.860001\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 69/252 [01:42<08:06,  2.66s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 108.769997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 28%|██▊       | 70/252 [01:45<07:50,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 110.440002  Profit: - $ 4.879997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 28%|██▊       | 71/252 [01:47<07:36,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 114.949997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 29%|██▊       | 72/252 [01:51<09:09,  3.05s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 119.029999  Profit: $ 10.169998\n"],"name":"stdout"},{"output_type":"stream","text":[" 29%|██▉       | 74/252 [01:56<08:04,  2.72s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 116.320000  Profit: $ 7.550003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|██▉       | 75/252 [01:59<07:42,  2.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 115.970001\n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|███       | 76/252 [02:01<07:27,  2.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 119.489998  Profit: $ 4.540001\n"],"name":"stdout"},{"output_type":"stream","text":["\r 31%|███       | 77/252 [02:03<07:15,  2.49s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 119.209999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 31%|███       | 78/252 [02:06<07:07,  2.46s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 119.260002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 31%|███▏      | 79/252 [02:08<07:02,  2.44s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 120.300003  Profit: $ 4.330002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 32%|███▏      | 80/252 [02:11<06:59,  2.44s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 119.389999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 32%|███▏      | 81/252 [02:13<06:57,  2.44s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 118.029999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 33%|███▎      | 82/252 [02:18<08:47,  3.10s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 118.639999  Profit: - $ 0.570000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 33%|███▎      | 83/252 [02:20<08:10,  2.90s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 117.339996  Profit: - $ 1.920006\n"],"name":"stdout"},{"output_type":"stream","text":[" 35%|███▍      | 87/252 [02:30<07:12,  2.62s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 116.589996\n"],"name":"stdout"},{"output_type":"stream","text":["\r 35%|███▍      | 88/252 [02:33<07:06,  2.60s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 119.050003  Profit: - $ 0.339996\n"],"name":"stdout"},{"output_type":"stream","text":[" 36%|███▌      | 90/252 [02:38<06:59,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 123.080002  Profit: $ 5.050003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 36%|███▌      | 91/252 [02:40<06:58,  2.60s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 122.940002  Profit: $ 6.350006\n"],"name":"stdout"},{"output_type":"stream","text":[" 37%|███▋      | 93/252 [02:46<06:51,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 123.750000\n"],"name":"stdout"},{"output_type":"stream","text":[" 38%|███▊      | 95/252 [02:53<08:09,  3.12s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 121.779999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 38%|███▊      | 96/252 [02:56<07:35,  2.92s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 123.239998\n"],"name":"stdout"},{"output_type":"stream","text":[" 39%|███▉      | 99/252 [03:03<06:34,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 127.879997  Profit: $ 4.129997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|███▉      | 100/252 [03:05<06:23,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 127.809998  Profit: $ 6.029999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|████      | 101/252 [03:08<06:14,  2.48s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 128.699997  Profit: $ 5.459999\n"],"name":"stdout"},{"output_type":"stream","text":[" 41%|████▏     | 104/252 [03:15<05:58,  2.42s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 131.880005\n"],"name":"stdout"},{"output_type":"stream","text":["\r 42%|████▏     | 105/252 [03:17<05:54,  2.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 130.960007  Profit: - $ 0.919998\n"],"name":"stdout"},{"output_type":"stream","text":[" 46%|████▌     | 116/252 [03:49<05:54,  2.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 128.979996\n"],"name":"stdout"},{"output_type":"stream","text":[" 47%|████▋     | 118/252 [03:54<05:47,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 130.889999  Profit: $ 1.910004\n"],"name":"stdout"},{"output_type":"stream","text":[" 49%|████▉     | 123/252 [04:06<05:13,  2.43s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 136.869995\n"],"name":"stdout"},{"output_type":"stream","text":["\r 49%|████▉     | 124/252 [04:08<05:09,  2.42s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 139.070007  Profit: $ 2.200012\n"],"name":"stdout"},{"output_type":"stream","text":[" 50%|█████     | 126/252 [04:17<07:47,  3.71s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 143.160004\n"],"name":"stdout"},{"output_type":"stream","text":[" 51%|█████     | 128/252 [04:22<06:19,  3.06s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 137.089996  Profit: - $ 6.070007\n"],"name":"stdout"},{"output_type":"stream","text":[" 52%|█████▏    | 131/252 [04:30<05:21,  2.66s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 134.990005\n"],"name":"stdout"},{"output_type":"stream","text":[" 53%|█████▎    | 134/252 [04:37<05:02,  2.56s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 136.759995\n"],"name":"stdout"},{"output_type":"stream","text":["\r 54%|█████▎    | 135/252 [04:40<05:00,  2.57s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 136.910004\n"],"name":"stdout"},{"output_type":"stream","text":[" 54%|█████▍    | 137/252 [04:45<04:56,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 135.389999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 55%|█████▍    | 138/252 [04:47<04:53,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 135.130005\n"],"name":"stdout"},{"output_type":"stream","text":["\r 55%|█████▌    | 139/252 [04:50<04:52,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 135.369995\n"],"name":"stdout"},{"output_type":"stream","text":[" 56%|█████▌    | 141/252 [04:55<04:47,  2.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 130.839996  Profit: - $ 4.150009\n"],"name":"stdout"},{"output_type":"stream","text":["\r 56%|█████▋    | 142/252 [04:58<04:44,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 129.710007\n"],"name":"stdout"},{"output_type":"stream","text":["\r 57%|█████▋    | 143/252 [05:00<04:38,  2.56s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 129.869995\n"],"name":"stdout"},{"output_type":"stream","text":["\r 57%|█████▋    | 144/252 [05:03<04:31,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 126.000000  Profit: - $ 10.759995\n"],"name":"stdout"},{"output_type":"stream","text":[" 58%|█████▊    | 146/252 [05:08<04:21,  2.47s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 125.349998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 58%|█████▊    | 147/252 [05:10<04:16,  2.45s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 120.989998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 59%|█████▊    | 148/252 [05:18<06:57,  4.02s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 121.260002  Profit: - $ 15.650002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 59%|█████▉    | 149/252 [05:20<06:04,  3.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 127.790001  Profit: - $ 7.599998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|█████▉    | 150/252 [05:23<05:27,  3.21s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 125.120003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|█████▉    | 151/252 [05:25<05:00,  2.97s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 122.059998  Profit: - $ 13.070007\n"],"name":"stdout"},{"output_type":"stream","text":[" 61%|██████    | 153/252 [05:30<04:26,  2.69s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 121.419998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 61%|██████    | 154/252 [05:32<04:16,  2.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 116.360001  Profit: - $ 19.009995\n"],"name":"stdout"},{"output_type":"stream","text":[" 62%|██████▏   | 156/252 [05:37<04:01,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 119.980003  Profit: - $ 9.730003\n"],"name":"stdout"},{"output_type":"stream","text":["\r 62%|██████▏   | 157/252 [05:40<03:56,  2.49s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 121.959999  Profit: - $ 7.909996\n"],"name":"stdout"},{"output_type":"stream","text":["\r 63%|██████▎   | 158/252 [05:42<03:57,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 121.029999  Profit: - $ 4.320000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 63%|██████▎   | 159/252 [05:45<03:57,  2.55s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 123.989998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 63%|██████▎   | 160/252 [05:47<03:54,  2.55s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 125.570000  Profit: $ 4.580002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▍   | 161/252 [05:50<03:53,  2.56s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 124.760002  Profit: - $ 0.360001\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▍   | 162/252 [05:52<03:52,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 120.529999  Profit: - $ 0.889999\n"],"name":"stdout"},{"output_type":"stream","text":[" 65%|██████▌   | 164/252 [05:58<03:46,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 123.389999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 65%|██████▌   | 165/252 [06:00<03:44,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 122.540001  Profit: - $ 1.449997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 66%|██████▌   | 166/252 [06:03<03:41,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 120.089996  Profit: - $ 3.300003\n"],"name":"stdout"},{"output_type":"stream","text":[" 67%|██████▋   | 170/252 [06:13<03:22,  2.47s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 119.900002\n"],"name":"stdout"},{"output_type":"stream","text":[" 69%|██████▉   | 174/252 [06:23<03:19,  2.56s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 126.209999  Profit: $ 6.309998\n"],"name":"stdout"},{"output_type":"stream","text":[" 71%|███████   | 179/252 [06:42<03:38,  2.99s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 134.429993\n"],"name":"stdout"},{"output_type":"stream","text":[" 72%|███████▏  | 182/252 [06:49<03:02,  2.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 134.160004  Profit: - $ 0.269989\n"],"name":"stdout"},{"output_type":"stream","text":[" 73%|███████▎  | 184/252 [06:54<02:52,  2.53s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 133.110001\n"],"name":"stdout"},{"output_type":"stream","text":[" 75%|███████▍  | 188/252 [07:04<02:36,  2.45s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 134.720001  Profit: $ 1.610001\n"],"name":"stdout"},{"output_type":"stream","text":[" 77%|███████▋  | 193/252 [07:16<02:22,  2.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 132.539993\n"],"name":"stdout"},{"output_type":"stream","text":[" 77%|███████▋  | 195/252 [07:21<02:19,  2.45s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 128.100006  Profit: - $ 4.439987\n"],"name":"stdout"},{"output_type":"stream","text":[" 81%|████████▏ | 205/252 [07:47<01:59,  2.53s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 124.690002\n"],"name":"stdout"},{"output_type":"stream","text":["\r 82%|████████▏ | 206/252 [07:49<01:54,  2.50s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 127.309998\n"],"name":"stdout"},{"output_type":"stream","text":["\r 82%|████████▏ | 207/252 [07:52<01:51,  2.47s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 125.430000  Profit: $ 0.739998\n"],"name":"stdout"},{"output_type":"stream","text":[" 84%|████████▎ | 211/252 [08:10<02:29,  3.66s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 125.279999  Profit: - $ 2.029999\n"],"name":"stdout"},{"output_type":"stream","text":[" 85%|████████▍ | 214/252 [08:17<01:48,  2.85s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 125.059998\n"],"name":"stdout"},{"output_type":"stream","text":[" 86%|████████▌ | 217/252 [08:24<01:30,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 125.900002  Profit: $ 0.840004\n"],"name":"stdout"},{"output_type":"stream","text":[" 90%|█████████ | 228/252 [08:53<01:01,  2.57s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 133.979996\n"],"name":"stdout"},{"output_type":"stream","text":["\r 91%|█████████ | 229/252 [08:55<00:58,  2.53s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 133.699997\n"],"name":"stdout"},{"output_type":"stream","text":["\r 91%|█████████▏| 230/252 [08:58<00:54,  2.50s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 133.410004\n"],"name":"stdout"},{"output_type":"stream","text":["\r 92%|█████████▏| 231/252 [09:00<00:52,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 133.110001  Profit: - $ 0.869995\n"],"name":"stdout"},{"output_type":"stream","text":["\r 92%|█████████▏| 232/252 [09:03<00:50,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 134.779999\n"],"name":"stdout"},{"output_type":"stream","text":["\r 92%|█████████▏| 233/252 [09:05<00:47,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 136.330002  Profit: $ 2.630005\n"],"name":"stdout"},{"output_type":"stream","text":["\r 93%|█████████▎| 234/252 [09:08<00:45,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 136.960007\n"],"name":"stdout"},{"output_type":"stream","text":["\r 93%|█████████▎| 235/252 [09:10<00:42,  2.50s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 137.270004  Profit: $ 3.860001\n"],"name":"stdout"},{"output_type":"stream","text":[" 94%|█████████▍| 237/252 [09:15<00:38,  2.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 142.020004  Profit: $ 7.240005\n"],"name":"stdout"},{"output_type":"stream","text":["\r 94%|█████████▍| 238/252 [09:18<00:35,  2.53s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 144.570007  Profit: $ 7.610001\n"],"name":"stdout"},{"output_type":"stream","text":[" 95%|█████████▌| 240/252 [09:23<00:30,  2.50s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 145.110001\n"],"name":"stdout"},{"output_type":"stream","text":["\r 96%|█████████▌| 241/252 [09:25<00:27,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 144.500000\n"],"name":"stdout"},{"output_type":"stream","text":["\r 96%|█████████▌| 242/252 [09:28<00:25,  2.52s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader sold:  $ 145.639999  Profit: $ 0.529999\n"],"name":"stdout"},{"output_type":"stream","text":[" 97%|█████████▋| 244/252 [09:33<00:20,  2.56s/it]"],"name":"stderr"},{"output_type":"stream","text":["AI Trader bought:  $ 148.479996\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8tyJBaYcitRs"},"source":["Test?"],"execution_count":null,"outputs":[]}]}